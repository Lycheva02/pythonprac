From f7c9bea709496bacf34a1c0544f84e77f96e1b35 Mon Sep 17 00:00:00 2001
From: Lycheva Ekaterina <s02200433@gse.cs.msu.ru>
Date: Sun, 19 Mar 2023 09:25:56 +0300
Subject: [PATCH 1/3] =?UTF-8?q?=D0=A0=D0=B0=D0=B1=D0=BE=D1=87=D0=B0=D1=8F?=
 =?UTF-8?q?=20=D0=B2=D0=B5=D1=80=D1=81=D0=B8=D1=8F=20=D0=B1=D0=B5=D0=B7=20?=
 =?UTF-8?q?=D0=BA=D0=BE=D1=80=D0=BE=D0=B2?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 20230313/1/client.py | 138 +++++++++++++++++++++++++++++++++++++++++++
 20230313/1/server.py |  68 +++++++++++++++++++++
 2 files changed, 206 insertions(+)
 create mode 100644 20230313/1/client.py
 create mode 100644 20230313/1/server.py

diff --git a/20230313/1/client.py b/20230313/1/client.py
new file mode 100644
index 0000000..c7b8a7b
--- /dev/null
+++ b/20230313/1/client.py
@@ -0,0 +1,138 @@
+from cowsay import cowsay
+from cowsay import list_cows
+from io import StringIO
+from cowsay import read_dot_cow
+import shlex
+import cmd
+import socket
+import sys
+
+custom_cow = read_dot_cow(StringIO('''
+$the_cow = <<EOC;
+           $thoughts
+           $thoughts
+    ,_                    _,
+    ) '-._  ,_    _,  _.-' (
+    )  _.-'.|\\\\--//|.'-._  (
+     )'   .'\\/o\\/o\\/'.   `(
+      ) .' . \\====/ . '. (
+       )  / <<    >> \\  (
+        '-._/``  ``\\_.-'
+  jgs     __\\\\'--'//__
+         (((""`  `"")))
+EOC'''))
+
+class Gameplay(cmd.Cmd):
+    prompt = '>>> '
+    intro = "<<< Welcome to Python-MUD 0.1 >>>"
+    cowlist = list_cows() + ['jgsbat']
+    weaponlist = {'sword': 10, 'spear': 15, 'axe': 20}
+    gamefield = [[None for j in range(10)] for i in range(10)]
+    x, y = 0, 0
+
+    def __init__(self, *args):
+        super().__init__(*args)
+        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
+        self.socket.connect(('localhost', 8080))
+
+    def do_left(self, args):
+        '''Move one step left'''
+        if args:
+            print("Invalid arguments")
+            return 0
+        self.socket.send('move -1 0\n'.encode())
+        print(self.socket.recv(1024).decode())
+
+    def do_right(self, args):
+        '''Move one step right'''
+        if args:
+            print("Invalid arguments")
+            return 0
+        self.socket.send('move 1 0\n'.encode())
+        print(self.socket.recv(1024).decode())
+
+    def do_up(self, args):
+        '''Move one step up'''
+        if args:
+            print("Invalid arguments")
+            return 0
+        self.socket.send('move 0 -1\n'.encode())
+        print(self.socket.recv(1024).decode())
+
+    def do_down(self, args):
+        '''Move one step down'''
+        if args:
+            print("Invalid arguments")
+            return 0
+        self.socket.send('move 0 1\n'.encode())
+        print(self.socket.recv(1024).decode())
+
+    def do_addmon(self, args):
+        ''' Add a monster:  addmon <name> coord <x> <y> hello <message> hp <health points>'''
+        args = shlex.split(args)
+        try:
+            name = args[0]
+            hello = args[args.index('hello') + 1]
+            hp = int(args[args.index('hp') + 1])
+            coord_ind = args.index('coords')
+            x, y = list(map(int, args[coord_ind + 1: coord_ind + 3]))
+        except:
+            print("Wrong parameters")
+            return 0
+        if not ((0 <= x <= 9) and (0 <= y <= 9)):
+            print("Invalid arguments")
+            return 0
+        if name not in self.cowlist:
+            print("Cannot add unknown monster")
+            return 0
+        if hp <= 0:
+            print("Invalid hp argument")
+        self.socket.send((shlex.join(["addmon", name, hello, str(hp), str(x), str(y)]) + '\n').encode())
+        print(self.socket.recv(1024).decode())
+
+    def do_attack(self, args):
+        '''Attack the monster: attack <name> [with <weapon>]'''
+        if not args:
+            print("The name is essential")
+            return 0
+        args = shlex.split(args)
+        name = args[0]
+        args.pop(0)
+        if not args:
+            args = shlex.split('with sword')
+        if len(args) != 2:
+            print("Invalid input")
+            return 0
+        if args[1] not in self.weaponlist:
+            print("Unknown weapon")
+            return 
+        damage = self.weaponlist[args[1]]
+        self.socket.send((shlex.join(["attack", name, str(damage)]) + '\n').encode())
+        print(self.socket.recv(1024).decode())
+
+    def complete_attack(self, prefix, line, start, end):
+        weapon_variants = self.weaponlist
+        name_variants = self.cowlist
+        if (not prefix and line.split()[-1] == 'with') or prefix == 'with':
+            return [i for i in weapon_variants]
+        if line.split()[-2] == 'with':
+            return [i for i in weapon_variants if i.startswith(prefix)]
+        if not prefix:
+            return [i for i in name_variants]
+        return [i for i in name_variants if i.startswith(prefix)]
+
+    def do_quit(self, args):
+        '''Exit the game'''
+        return 1
+
+    def do_EOF(self, args):
+        return 1
+
+    def default(line):
+        print("Invalid command")
+
+
+
+game = Gameplay()
+game.cmdloop()
+        
diff --git a/20230313/1/server.py b/20230313/1/server.py
new file mode 100644
index 0000000..376ae85
--- /dev/null
+++ b/20230313/1/server.py
@@ -0,0 +1,68 @@
+import shlex
+import asyncio
+
+class Monster:
+    def __init__(self, name, hello, hp):
+        self.name = name
+        self.hello = hello
+        self.hp = hp
+
+class Gameplay():
+    gamefield = [[None for j in range(10)] for i in range(10)]
+    x, y = 0, 0
+
+    def encounter(self, x, y):
+        mon = self.gamefield[self.x][self.y]
+        return [mon.name, mon.hello]
+
+    def addmon(self, name, hello, hp, x, y):
+        repl_flag = self.gamefield[x][y]
+        self.gamefield[x][y] = Monster(name, hello, hp)
+        ans = f"Added monster {name} to ({x}, {y}) saying {hello}"
+        if repl_flag:
+            ans += "\nReplaced the old monster"
+        return ans
+
+    def attack(self, name, damage):
+        m = self.gamefield[self.x][self.y]
+        if not m or m.name != name:
+            return f"No {name} here"
+        damage = min(damage, m.hp)
+        m.hp -= damage
+        ans = f"Attacked {m.name}, damage {damage} hp"
+        if m.hp:
+            ans += f"\n{m.name} now has {m.hp}"
+        else:
+            ans += f"\n{m.name} died"
+            self.gamefield[self.x][self.y] = None
+        return ans
+
+    async def play(self, reader, writer):
+        while not reader.at_eof():
+            data = await reader.readline()
+            data = shlex.split(data.strip().decode())
+            match data:
+                case ['move', x_chng, y_chng]:
+                    self.x = (self.x + int(x_chng)) % 10
+                    self.y = (self.y + int(y_chng)) % 10
+                    ans = f"Moved to ({self.x}, {self.y})"
+                    if self.gamefield[self.x][self.y] != None:
+                        ans += f"\n{shlex.join(self.encounter(self.x, self.y))}"
+                    writer.write(ans.encode())
+                    await writer.drain()
+                case ['addmon', name, hello, hp, x_str, y_str]:
+                    writer.write(self.addmon(name, hello, int(hp), int(x_str), int(y_str)).encode())
+                    await writer.drain()
+                case ['attack', name, damage]:
+                    writer.write(self.attack(name, int(damage)).encode())
+                    await writer.drain()
+        writer.close()
+        await writer.wait_closed()
+
+async def main():
+    gmpl = Gameplay()
+    server = await asyncio.start_server(gmpl.play, '0.0.0.0', 8080)
+    async with server:
+        await server.serve_forever()
+
+asyncio.run(main())
-- 
2.25.1

